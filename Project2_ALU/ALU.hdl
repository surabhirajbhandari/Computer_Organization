/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: July 1, 2023
 * 
 * Name of student: Surabhi Rajbhandari
 * Date modified: 7/15/23
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng;                 // 1 if (out < 0),  0 otherwise

    PARTS:
    // Preset Inputs
    // x zero/negate stages
    Mux16(a=x, b=false, sel=zx, out=zxout);            // if (zx == 1) set x = 0
    Not16(in=zxout, out=notx);                                                     
    Mux16(a=zxout, b=notx, sel=nx, out=nxout);         // if (nx == 1) set x = !x

    // y zero/negate stages
    Mux16(a=y, b=false, sel=zy, out=zyout);            // if (zy == 1) set y = 0
    Not16(in=zyout, out=noty);                          
    Mux16(a=zyout, b=noty, sel=ny, out=nyout);         // if (ny == 1) set y = !y

    // ALU operation
    // x + y OR x & y
    And16(a=nxout, b=nyout, out=andout);
    Add16(a=nxout, b=nyout, out=adderout);
    Mux16(a=andout, b=adderout, sel=f, out=fout);     // if (f == 1) set out = x + y ; if (f == 0) set out = x & y

    // Post-set ALU output
    // negate the output?
    Not16(in=fout, out=notfout);                      
    Mux16(a=fout, b=notfout, sel=no, out=out, out[15]=signbit, out[0..7]=lsb, out[8..15]=msb);      // if (no == 1) set out = !out

    // Logic to determine zr & ng
    // if (out == 0) set zr = 1; else 0.
    Or8Way(in=lsb, out=zr1);
    Or8Way(in=msb, out=zr2);
    Or(a=zr1, b=zr2, out=tempzr);
    Not(in=tempzr, out=zr);

    // if (out < 0) set ng = 1; else 0.
    And(a=signbit, b=true, out=ng);
}